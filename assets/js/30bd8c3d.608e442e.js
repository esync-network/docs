"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[855],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>h});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),d=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(r),m=n,h=p["".concat(c,".").concat(m)]||p[m]||u[m]||o;return r?a.createElement(h,i(i({ref:t},s),{},{components:r})):a.createElement(h,i({ref:t},s))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:n,i[1]=l;for(var d=2;d<o;d++)i[d]=r[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4855:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=r(7462),n=(r(7294),r(3905));const o={sidebar_position:6},i="Quick Command Reference",l={unversionedId:"validators/quick_reference",id:"validators/quick_reference",title:"Quick Command Reference",description:"Start the node",source:"@site/docs/validators/quick_reference.md",sourceDirName:"validators",slug:"/validators/quick_reference",permalink:"/validators/quick_reference",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"validators",previous:{title:"Operation and Maintenance",permalink:"/validators/node_maintenance"},next:{title:"Log Messages",permalink:"/validators/log_messages"}},c={},d=[{value:"Start the node",id:"start-the-node",level:2},{value:"Stop the node",id:"stop-the-node",level:2},{value:"Restart the node",id:"restart-the-node",level:2},{value:"Show Logs",id:"show-logs",level:2},{value:"Connect to Geth",id:"connect-to-geth",level:2},{value:"Clean/Reset/Reinitialize the eth1 database",id:"cleanresetreinitialize-the-eth1-database",level:2},{value:"Import Private Key",id:"import-private-key",level:2}],s={toc:d},p="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"quick-command-reference"},"Quick Command Reference"),(0,n.kt)("h2",{id:"start-the-node"},"Start the node"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f validator.docker-compose.yaml up -d\n")),(0,n.kt)("h2",{id:"stop-the-node"},"Stop the node"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"# 1. kill geth and beacon client (proper shutdown)\ndocker exec -it mainnet-geth-1 pkill geth\ndocker exec -it mainnet-beacon-1 pkill beacon-chain\n\n# 2. shutdown the container\ndocker-compose -f validator.docker-compose.yaml down\n")),(0,n.kt)("h2",{id:"restart-the-node"},"Restart the node"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"# 1. kill geth (proper shutdown)\ndocker exec -it mainnet-geth-1 pkill geth\ndocker exec -it mainnet-beacon-1 pkill beacon-chain\n\n# 2. restart the container\ndocker-compose -f validator.docker-compose.yaml restart\n")),(0,n.kt)("h2",{id:"show-logs"},"Show Logs"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"docker logs --tail 10 -f mainnet-geth-1\ndocker logs --tail 10 -f mainnet-beacon-1\ndocker logs --tail 10 -f mainnet-validator-1\n")),(0,n.kt)("h2",{id:"connect-to-geth"},"Connect to Geth"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"docker exec -it mainnet-geth-1 geth attach\n")),(0,n.kt)("h2",{id:"cleanresetreinitialize-the-eth1-database"},"Clean/Reset/Reinitialize the eth1 database"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"DATADIR=/var/lib/esync/mainnet\ndocker exec -it mainnet-geth-1 pkill geth\ndocker exec -it mainnet-beacon-1 pkill beacon-chain\ndocker-compose -f $DATADIR/validator.docker-compose.yaml down\n\ndocker run -it -v $DATADIR/datadir-eth1:/root/.ethereum -e POD_NAME --entrypoint geth ecredits/node:latest removedb\n\ndocker-compose -f $DATADIR/validator.docker-compose.yaml up -d\n")),(0,n.kt)("h2",{id:"import-private-key"},"Import Private Key"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'docker run --rm -it -v "$datadir/gened/validator_keys":/keys -v "$datadir/datadir-eth2-validator":/root/.lighthouse -v "$passwordpath":/password.cfg --name validatorimport ecredits/lighthouse:latest lighthouse --network $network account validator import --datadir /root/.lighthouse --directory /keys --reuse-password --password-file /password.cfg\n\n')),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"$datadir/gened/validator_keys")," points to the directory that holds the the keys."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"$datadir/datadir-eth2-validator")," points to the datadir of the validator."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},'$passwordpath":/password.cfg')," points to the password file."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"$network")," should be the same docker network as your beacon node is in.")))}u.isMDXComponent=!0}}]);