"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[146],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||o;return n?a.createElement(m,l(l({ref:t},p),{},{components:n})):a.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1054:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},l="Create an ERC-20 Token",i={unversionedId:"developers/erc20",id:"developers/erc20",title:"Create an ERC-20 Token",description:"In this guide, we'll demonstrate how to create a custom ERC-20 token on the eCredits Blockchain using the Hardhat development environment. Hardhat is a popular development tool for building smart contracts on the Ethereum network. We'll use the OpenZeppelin contracts, which are a suite of reusable, secure smart contracts. These contracts have been thoroughly tested and audited by the community, which provides developers with a solid foundation to build upon, while reducing potential security risks associated with building smart contracts from scratch. We'll then deploy the contract on the eCredits Testnet and the eCredits Mainnet.",source:"@site/docs/developers/erc20.md",sourceDirName:"developers",slug:"/developers/erc20",permalink:"/docs/developers/erc20",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"developers",previous:{title:"eCredits Widget API",permalink:"/docs/developers/ecredits_widget_api"}},s={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Set up the development environment",id:"step-1-set-up-the-development-environment",level:2},{value:"Step 2: Create the ERC-20 token contract",id:"step-2-create-the-erc-20-token-contract",level:2},{value:"Step 3: Compile the smart contract",id:"step-3-compile-the-smart-contract",level:2},{value:"Step 4: Deploy the ERC-20 token to the eCredits Testnet",id:"step-4-deploy-the-erc-20-token-to-the-ecredits-testnet",level:2},{value:"Step 5: Interact with your ERC-20 token",id:"step-5-interact-with-your-erc-20-token",level:2},{value:"Step 6: Deploy the token to the eCredits Mainnet",id:"step-6-deploy-the-token-to-the-ecredits-mainnet",level:2},{value:"Conclusion",id:"conclusion",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-an-erc-20-token"},"Create an ERC-20 Token"),(0,r.kt)("p",null,"In this guide, we'll demonstrate how to create a custom ERC-20 token on the eCredits Blockchain using the Hardhat development environment. Hardhat is a popular development tool for building smart contracts on the Ethereum network. We'll use the OpenZeppelin contracts, which are a suite of reusable, secure smart contracts. These contracts have been thoroughly tested and audited by the community, which provides developers with a solid foundation to build upon, while reducing potential security risks associated with building smart contracts from scratch. We'll then deploy the contract on the eCredits Testnet and the eCredits Mainnet."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Node.js (version 12.x or higher): Install it from ",(0,r.kt)("a",{parentName:"li",href:"https://nodejs.org/en/download/"},"here")),(0,r.kt)("li",{parentName:"ol"},"A code editor like Visual Studio Code: Install it from ",(0,r.kt)("a",{parentName:"li",href:"https://code.visualstudio.com/download"},"here"))),(0,r.kt)("h2",{id:"step-1-set-up-the-development-environment"},"Step 1: Set up the development environment"),(0,r.kt)("p",null,"First, create a new directory for your project and navigate into it using the command line:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir my-erc20-token\ncd my-erc20-token\n")),(0,r.kt)("p",null,"Initialize a new Node.js project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm init -y\n")),(0,r.kt)("p",null,"Install Hardhat and its dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm install --save-dev hardhat @nomiclabs/hardhat-waffle ethereum-waffle chai @nomiclabs/hardhat-ethers ethers\n")),(0,r.kt)("p",null,"Create a Hardhat configuration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npx hardhat\n")),(0,r.kt)("p",null,'Select "Create an empty hardhat.config.js" when prompted.'),(0,r.kt)("p",null,"Open the ",(0,r.kt)("inlineCode",{parentName:"p"},"hardhat.config.js")," file in your code editor and replace its contents with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'require("@nomiclabs/hardhat-waffle");\n\nmodule.exports = {\n  solidity: "0.8.19",\n  networks: {\n    ecredits: {\n      url: "https://rpc.ecredits.com",\n      accounts: ["your_private_key_here"],\n      gasPrice: 20000000000, // 20 Gwei\n    },\n    ecredits_test: {\n      url: "https://rpc.tst.ecredits.com",\n      accounts: ["your_private_key_here"],\n      gasPrice: 20000000000, // 20 Gwei\n    },\n  },\n};\n')),(0,r.kt)("p",null,"Replace ",(0,r.kt)("inlineCode",{parentName:"p"},'"your_private_key_here"')," with your private key that you use for deployment.  "),(0,r.kt)("p",null,"Install the openzeppelin/contracts package:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @openzeppelin/contracts\n")),(0,r.kt)("h2",{id:"step-2-create-the-erc-20-token-contract"},"Step 2: Create the ERC-20 token contract"),(0,r.kt)("p",null,"In your project directory, create a new directory called ",(0,r.kt)("inlineCode",{parentName:"p"},"contracts")," and a new file inside it called ",(0,r.kt)("inlineCode",{parentName:"p"},"MyToken.sol"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir contracts\ntouch contracts/MyToken.sol\n")),(0,r.kt)("p",null,"Paste the following Solidity code into ",(0,r.kt)("inlineCode",{parentName:"p"},"MyToken.sol"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract MyToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("MyToken", "MTK") {\n        _mint(msg.sender, initialSupply * 10**18);\n    }\n}\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Note: You can use the ",(0,r.kt)("a",{parentName:"p",href:"https://www.openzeppelin.com/contracts"},"OpenZeppelin")," Contracts Wizard to extend your ERC-20 Token with additional functionality.")),(0,r.kt)("h2",{id:"step-3-compile-the-smart-contract"},"Step 3: Compile the smart contract"),(0,r.kt)("p",null,"Compile the contract using Hardhat:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npx hardhat compile\n")),(0,r.kt)("h2",{id:"step-4-deploy-the-erc-20-token-to-the-ecredits-testnet"},"Step 4: Deploy the ERC-20 token to the eCredits Testnet"),(0,r.kt)("p",null,"Create a new directory called ",(0,r.kt)("inlineCode",{parentName:"p"},"scripts")," and a new file inside it called ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir scripts\ntouch scripts/deploy.js\n")),(0,r.kt)("p",null,"Paste the following JavaScript code into ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'async function main() {\n  const [deployer] = await ethers.getSigners();\n  console.log("Deploying contracts with the account:", deployer.address);\n\n  const MyToken = await ethers.getContractFactory("MyToken");\n  const token = await MyToken.deploy(1000000); // Deploy with an initial supply of 1,000,000 tokens\n\n  console.log("Token deployed to:", token.address);\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(error);\n    process.exit(1);\n  });\n')),(0,r.kt)("p",null,"Now, make sure that your account specified in ",(0,r.kt)("inlineCode",{parentName:"p"},"hardhat.config.js")," has some eCredits to pay the gas fees for the deployment and deploy the contract to the eCredits Testnet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npx hardhat run --network ecredits_test scripts/deploy.js\n")),(0,r.kt)("p",null,"If the deployment is successful, the console will display a message with the contract address. Save this address as you will need it to interact with your ERC-20 token.",(0,r.kt)("br",{parentName:"p"}),"\n",'Once the deployment is done, you will see a "Token Minting" transaction at the ',(0,r.kt)("a",{parentName:"p",href:"https://explorer.tst.ecredits.com/"},"eCredits Testnet Block Explorer"),"."),(0,r.kt)("h2",{id:"step-5-interact-with-your-erc-20-token"},"Step 5: Interact with your ERC-20 token"),(0,r.kt)("p",null,"You can interact with your token by using Hardhat's console:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npx hardhat console --network ecredits_test\n")),(0,r.kt)("p",null,"Then, you can instantiate your token contract:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const token = await ethers.getContractAt("MyToken", "the_token_contract_address")\n')),(0,r.kt)("p",null,"Replace ",(0,r.kt)("inlineCode",{parentName:"p"},'"the_token_contract_address"')," with the address of your deployed token contract."),(0,r.kt)("p",null,"Now, you can call the contract's methods. For instance, to check the total supply:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const totalSupply = await token.totalSupply()\nconsole.log("Total supply is: ", totalSupply.toString())\n')),(0,r.kt)("p",null,"To check the balance of an account:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const balance = await token.balanceOf("the_account_address")\nconsole.log("Balance is: ", balance.toString())\n')),(0,r.kt)("p",null,"Replace ",(0,r.kt)("inlineCode",{parentName:"p"},'"the_account_address"')," with the address you want to check."),(0,r.kt)("p",null,"Remember to exit the console once you're done:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},".exit\n")),(0,r.kt)("h2",{id:"step-6-deploy-the-token-to-the-ecredits-mainnet"},"Step 6: Deploy the token to the eCredits Mainnet"),(0,r.kt)("p",null,"Repeat Step 4, but use ",(0,r.kt)("inlineCode",{parentName:"p"},"--network eCredits")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"--network eCredits_test"),".",(0,r.kt)("br",{parentName:"p"}),"\n","Make sure that your account has some eCredits for the deployment."),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"Congratulations! You have just created your own ERC-20 token on the eCredits network using Hardhat. With your token now deployed, you can start building decentralized applications (dApps) around it or even distribute it to other users."),(0,r.kt)("p",null,"Remember to test your contract extensively and possibly get a security audit before using it in a production environment."))}u.isMDXComponent=!0}}]);